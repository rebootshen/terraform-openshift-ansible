---
- name: Setting up Linux server
  hosts: service
  vars_files:
    - vars/main.yaml
  handlers:
    - import_tasks: handlers/main.yaml
  become: yes
  become_method: sudo
  gather_facts: no
  tasks:
  - name: Wait 30 seconds max for kicking off the playbook, but start checking after 5 seconds
    wait_for_connection:
      delay: 5
      timeout: 30
  # First, let's make sure the hosts are properly named
  - name: Set hostname
    hostname:
      name: "{{ new_hostname }}"
  # - name: set timezone to Europe/Brussels
  #   timezone:
  #     name: Europe/Brussels
  
  # - name: No SELinux, thanks
  #   ansible.posix.selinux:
  #     state: disabled
  - name: Install git vim wget curl bash-completion tree tar libselinux-python3 firewalld
    package: 
      name:
        - git
        - vim
        - wget
        - curl
        - bash-completion
        - tree
        - tar
        - libselinux-python3
        - firewalld
      state: present
    ignore_errors: yes # if packages already exists

  - name: gather service facts
    ansible.builtin.service_facts:

  # - name: stop firewalld
  #   become: yes
  #   become_user: root
  #   systemd:
  #     name: firewalld
  #     state: stopped
  #     enabled: no
  #   when: ansible_facts.services['firewalld.service'] is defined and ansible_facts.services['firewalld.service'].state != 'stopped'

  # # No local firewall. You've been warned. If you need it, turn it back on afterwards, and ensure it still goes well.
  # - name: Stop local firewall
  #   service:
  #     # port: "{{ item }}"
  #     # permanent: yes
  #     name: firewalld
  #     state: stopped
  #   #failed_when: false   #works

# #  Fix CentOS AppStream repo
#   - name: Fix CentOS 8 AppStream repo in new releases
#     shell: |
#       sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
#       sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*

  - name: Create directories
    file: 
      path: "{{ item.name }}"
      state: directory
      owner: "{{ item.owner }}"
      mode: 0755          # For some reason, item.mode converts 0755 into 493 ... weird
    loop:
      - { name: /var/www/html/okd4,             owner: root,        mode: 0755 }
      - { name: /etc/named/zones,               owner: root,        mode: 0755 }
      - { name: tmp,                            owner: "{{ user.name }}",  mode: 0755 }
      - { name: install_dir,                    owner: "{{ user.name }}",  mode: 0755 }
      - { name: /var/lib/tftpboot/fcos,         owner: root,        mode: 0755 }
      - { name: /var/lib/tftpboot/pxelinux.cfg, owner: root,        mode: 0755 }
      - { name: /var/nfsshare/registry,         owner: nobody,      mode: 0777 } 
      - { name: /etc/dhcp,                      owner: root,        mode: 0755 } 
  
  # Need this here, just to make sure we have a working name resolution for packages installation
  - name: Overwrite resolv.conf
    template:
      src:  templates/resolv.conf.j2
      dest: /etc/resolv.conf
      owner: root
      mode: 0644

  - name: Fix NetworkManager.cnf
    lineinfile:
      path: /etc/NetworkManager/NetworkManager.conf
      insertafter: '[main]'
      line: 'dns=none'
    notify:
      - Restart DNS
  # I added this only for troubleshooting ... will remove
  # - name: Add aliases
  #   lineinfile: 
  #     path: /home/ansiblebot/.bashrc
  #     insertafter: EOF
  #     line: "{{ item }}"
  #   loop:
  #     - alias ssb="ssh -i .ssh/ssh_okd core@192.168.2.189"
  #     - alias ssm0="ssh -i ~/.ssh/ssh_okd core@192.168.2.190"
  #     - alias ssm1="ssh -i ~/.ssh/ssh_okd core@192.168.2.191"
  #     - alias ssm2="ssh -i ~/.ssh/ssh_okd core@192.168.2.192"
  #     - alias ssw0="ssh -i ~/.ssh/ssh_okd core@192.168.2.193"
  #     - alias ssw1="ssh -i ~/.ssh/ssh_okd core@192.168.2.194"
  #     - alias ssw2="ssh -i ~/.ssh/ssh_okd core@192.168.2.195"   

  # Setting up DNS, HTTPD, HA Proxy, TFTPD
  - name: install bind, httpd, haproxy, tftp, dhcpd
    yum:
      state: present
      name:
      - bind       # "bind" for CentOS, "bind9" for Ubuntu
      - bind-utils # "bind-utils" for CentOS, "bind9-utils" for Ubuntu
      - httpd
      - haproxy
      - tftp-server 
      - dhcp-server
      - syslinux
    
      update_cache: yes

  # Build DNS configuration
  - name: Create DNS config files
    template:
      src:  "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: root
      mode: 0644
    with_items:
      - { src: templates/dns-forward.j2,          dest: /etc/named/zones/db.forward }
      - { src: templates/dns-reverse.j2,          dest: /etc/named/zones/db.reverse }
      - { src: templates/named.conf.j2,           dest: /etc/named.conf }
      - { src: templates/named.conf.local.j2,     dest: /etc/named/named.conf.local }
      - { src: templates/haproxy.cfg.j2,          dest: /etc/haproxy/haproxy.cfg }
      - { src: templates/dhcpd.conf.j2,           dest: /etc/dhcp/dhcpd.conf }
      - { src: templates/registry_pv.yaml.j2,     dest: tmp }
      #- { src: templates/install-config.yaml.j2,  dest: install_dir/install-config.yaml }
      - { src: templates/install-config.yaml.j2,  dest: install-config-base.yaml }
    notify:
    - Restart DNS
    - Restart TFTP    # May not be necessary
    - Restart DHCP
    - Restart haproxy

# Firewall ports to open
  # - name: Stop local firewall
  #   firewalld:
  #     # port: "{{ item }}"
  #     # permanent: yes
  #     state: stopped
    # I'm not collecting facts yet ... 
    #when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
    # loop:
    #   - 53/udp      # DNS
    #   - 69/tcp      # Troubleshooting some issues, shouldn't be necessary 
    #   - 80/tcp      # HTTP
    #   - 111/tcp
    #   - 111/udp		 # NFS
    #   - 443/tcp     # HTTPS
    #   # - 635/tcp
    #   # - 635/udp
    #   - 4011/udp
    #   - 4011/tcp
    #   - 6443/tcp 
    #   - 8080/tcp
    #   - 22623/tcp
    # notify:
    #   - Restart FW

  # - name: open firewall services
  #   firewalld:
  #     service: "{{ item }}"
  #     permanent: yes
  #     state: enabled
  #   loop:
  #     - nfs
  #     - rpc-bind
  #     - mountd
  #     - tftp
  #   notify:
  #     - Restart FW

  # Run it more than once, and it'll add 80 ... and 80 ... 
  - name: change httpd port
    lineinfile:
      path: /etc/httpd/conf/httpd.conf
      regexp: '^Listen.*80'
      line: "Listen 8080" 
      backup: yes
        
  - name: Prepare haproxy
    shell: |
      setsebool -P haproxy_connect_any 1

# And don't forget to restart it
  - name: enable services
    systemd:
      name: "{{ item }}"
      enabled: yes
      state: restarted
    with_items:
      - named
      - haproxy
      - httpd 
      - tftp
      # - nfs-server
      - dhcpd
      - firewalld
#      - rpcbind

  - name: reload systemd daemons
    systemd:
      daemon_reload: yes


- name: Setup OKD services
  hosts: service
  vars_files:
    - vars/main.yaml
  handlers:
    - import_tasks: handlers/main.yaml
  #become: yes
  #become_method: sudo
  gather_facts: no
  tasks:
 
    # Let's download the right files for our version of OKD
    - name: Download OKD files
      get_url:
        url: "{{ item.src }}"
        dest: "{{ item.dest }}" 
        mode: 0644
      with_items:
        - { src: "{{ okd.client }}",    dest: tmp/client.tar.gz }
        - { src: "{{ okd.install }}",   dest: tmp/install.tar.gz }
        - { src: "{{ okd.kernel }}",    dest: tmp/kernel }
        - { src: "{{ okd.rootfs }}",    dest: tmp/rootfs.img }
        - { src: "{{ okd.initramfs }}", dest: tmp/initramfs.img }
        - { src: "{{ jq_file }}",       dest: tmp/jq }

    - name: Extract and copy the OKD binaries (oc, kubectl, openshift-install)
      become: yes
      shell: |
        cd tmp
        tar -xzvf install.tar.gz
        rm install.tar.gz
        strip openshift-install               # I like my binaries not bloated, thanks
        mv openshift-install /usr/local/bin/
        tar -xzvf client.tar.gz 
        rm client.tar.gz
        strip kubectl
        mv oc kubectl /usr/local/bin/
        cp kernel /var/lib/tftpboot/fcos
        cp initramfs.img /var/lib/tftpboot/fcos
        cp rootfs.img /var/www/html/okd4
        cp -rvf /usr/share/syslinux/* /var/lib/tftpboot
 # Generating the key that will be used by OKD to communicate will all nodes.
    - name: keygen
      community.crypto.openssh_keypair:
        path: "'{{ user.home }}'/.ssh/id_rsa"    #ssh_okd
        owner: '{{ user.name }}'

    - name: get remote file contents
      command: "cat '{{ user.home }}'/.ssh/id_rsa.pub"    #ssh_okd.pub
      register: key
      tags:
        - pxe

    # missing value : dns
    # - name: Copy install-config-base from local
    #   copy:
    #     src: templates/install-config.yaml.j2
    #     dest: install-config-base.yaml
    #   tags:
    #     - pxe

    - name: copy install-config-base.yaml to install_dir
      command: "cp '{{ user.home }}'/install-config-base.yaml '{{ user.home }}'/install_dir/install-config.yaml"
      tags:
        - pxe

    - name: Add SSH key to install-config.yaml
      vars:
        sshkey: "{{ key.stdout }}"
      lineinfile:
        path: '{{ user.home }}/install_dir/install-config.yaml'
        regexp: '^sshKey:'
        line: "sshKey: '{{ sshkey }}' " 
        backup: yes
      tags:
        - pxe

    # Get the pull secret from ~/pull_secret.txt. If you don't have one, create the file and add '{"auths":{"fake":{"auth": "bar"}}}' as the content
    - name: Add Pull Secret to install-config.yaml
      vars:
        pull: "'{{ lookup('file', './files/pull_secret.txt') }}'"  #must add single qoute at begin and end
      lineinfile: 
        path: "'{{ user.home }}'/install_dir/install-config.yaml"
        regexp: '^pullSecret:'
        # To make sure you don't run into escaping quotes, double quotes... 
        #just make sure your pull secret in the file is between single quotes, and double quotes everywhere else :!env_var 
        # For instance: '{"auths":{"fake":{"auth": "bar"}}}'
        line: "pullSecret: {{ pull }}"   
        backup: yes
      tags:
        - pxe

    # - name: Ensure .openshift dir exists
    #   file: 
    #     path: "/home/ansiblebot/.openshift"
    #     state: directory
    #   tags:
    #     - pxe

    # - name: Copy pull secret
    #   copy:
    #     src: ./files/pull_secret.txt
    #     dest: /home/ansiblebot/.openshift/pull-secret
    #   tags:
    #     - pxe

    # Let's create the proper OKD installation files (ignition, manifests, ...)
    - name: Create the install files
      shell: |
        /usr/local/bin/openshift-install create manifests --dir={{ user.home }}/install_dir/
        cp {{ user.home }}/install_dir/install-config.yaml {{ user.home }}/install-config.back
        sed -i 's/mastersSchedulable: true/mastersSchedulable: False/' {{ user.home }}/install_dir/manifests/cluster-scheduler-02-config.yml
        /usr/local/bin/openshift-install create ignition-configs --dir={{ user.home }}/install_dir/
      tags:
        - pxe

    # Make these files available on the Web server
    - name: Copy all files to www, setup selinux,firewall
      become: yes
      shell: |
        cp -R {{ user.home }}/install_dir/* /var/www/html/okd4/
        restorecon -RFv /var/www/html/okd4
        restorecon -RFv /var/www/html/
        restorecon -RFv /var/lib/tftpboot/fcos
        semanage port -a 6443 -t http_port_t -p tcp
        semanage port -a 22623 -t http_port_t -p tcp
        semanage port -a 32700 -t http_port_t -p tcp
        firewall-cmd --add-service={dhcp,tftp,http,https,dns} --permanent
        #firewall-cmd --add-service={http,https} --permanent
        firewall-cmd --add-port={6443,22623}/tcp --permanent
        firewall-cmd --add-port=8080/tcp --permanent
        firewall-cmd --reload
      tags:
        - pxe


    - name: Change www ownership
      become: yes
      file: 
        path: /var/www/html/okd4/
        recurse: yes 
        state: directory
        owner: apache
        group: apache
        mode: 0755
      tags:
        - pxe

    # - name: Change install_dir ownership
    #   file: 
    #     path: /home/ansiblebot/install_dir
    #     recurse: yes 
    #     state: directory
    #     owner: ansiblebot
    #     group: ansiblebot
    #     mode: 0755

    - name: create PXE files
      become: yes
      template:
        src: templates/pxe-{{ item.role }}.j2
        dest: "/var/lib/tftpboot/pxelinux.cfg/01-{{ item.macaddr | lower | regex_replace (':', '-')}}"    # lower ?
        mode: 0555
      with_items: 
      # Todo : MAKE THIS DANG LIST FRACKING GENERIC !!! 
        - { macaddr: "{{ bootstrap_node.macaddr }}", role: bootstrap}
        - { macaddr: "{{ master_nodes[0].macaddr }}", role: master}
        - { macaddr: "{{ master_nodes[1].macaddr }}", role: master}
        - { macaddr: "{{ master_nodes[2].macaddr }}", role: master}
        - { macaddr: "{{ worker_nodes[0].macaddr }}", role: worker}
        - { macaddr: "{{ worker_nodes[1].macaddr }}", role: worker}
        - { macaddr: "{{ worker_nodes[2].macaddr }}", role: worker}
      notify:
        - Restart TFTP
      tags:
        - pxe
        - last