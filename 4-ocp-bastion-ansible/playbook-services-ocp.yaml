---
- name: Setting up Linux server
  hosts: service
  vars_files:
    - vars/main.yaml
  handlers:
    - import_tasks: handlers/main.yaml
  become: yes
  become_method: sudo
  gather_facts: no
  tasks:
  - name: Wait 30 seconds max for kicking off the playbook, but start checking after 5 seconds
    wait_for_connection:
      delay: 5
      timeout: 30

  - name: Set hostname
    hostname:
      name: "{{ new_hostname }}"

  # - name: set timezone to Asia/Hong_Kong
  #   timezone:
  #     name: Asia/Hong_Kong
  
  # - name: No SELinux, thanks
  #   ansible.posix.selinux:
  #     state: disabled

  - name: Install git vim wget curl bash-completion tree tar libselinux-python3 firewalld traceroute
    package: 
      name:
        - git
        - vim
        - wget
        - curl
        - bash-completion
        - tree
        - tar
        - libselinux-python3
        - firewalld
        - traceroute
      state: present
    ignore_errors: yes # if packages already exists
    # epel-release, ansible

  - name: gather service facts
    ansible.builtin.service_facts:

  - name: Create directories
    file: 
      path: "{{ item.name }}"
      state: directory
      owner: "{{ item.owner }}"
      mode: 0755          # For some reason, item.mode converts 0755 into 493 ... weird
    loop:
      - { name: /var/www/html/rhcos,             owner: root,        mode: 0755 }
      - { name: /var/www/html/ignition,          owner: root,        mode: 0755 }
      - { name: /etc/named/zones,               owner: root,        mode: 0755 }
      - { name: tmp,                            owner: "{{ user.name }}",  mode: 0755 }
      - { name: install_dir,                    owner: "{{ user.name }}",  mode: 0755 }
      - { name: .kube,                          owner: "{{ user.name }}",  mode: 0755 }
      - { name: /var/lib/tftpboot/rhcos,         owner: root,        mode: 0755 }
      - { name: /var/lib/tftpboot/pxelinux.cfg, owner: root,        mode: 0755 }
      #- { name: /var/nfsshare/registry,         owner: nobody,      mode: 0777 } 
      - { name: /etc/dhcp,                      owner: root,        mode: 0755 } 
  
    # Setting up DNS, HTTPD, HA Proxy, TFTPD
  - name: install bind, httpd, haproxy, tftp, dhcpd
    yum:
      state: present
      name:
      - bind       # "bind" for CentOS, "bind9" for Ubuntu
      - bind-utils # "bind-utils" for CentOS, "bind9-utils" for Ubuntu
      - httpd
      - haproxy
      - tftp-server 
      - dhcp-server
      - syslinux
      update_cache: yes

  # Run it more than once, and it'll add 80 ... and 80 ... 
  - name: change httpd port
    lineinfile:
      path: /etc/httpd/conf/httpd.conf
      regexp: '^Listen.*80'
      line: "Listen 8080" 
      backup: yes
        
  - name: Prepare haproxy
    shell: |
      setsebool -P haproxy_connect_any 1

  - name: setup dhcp server
    include_tasks: "{{ playbook_dir }}/tasks/configure_dhcpd.yaml"

  - name: copying file for dns
    become: true 
    copy:
      src: files/set-dns-serial.sh
      dest: /usr/local/bin
      owner: root
      group: root       
      mode: 0755
    
  - name: setup dns server bind
    include_tasks: "{{ playbook_dir }}/tasks/configure_bind_dns.yaml"

  - name: setup tftp server
    include_tasks: "{{ playbook_dir }}/tasks/configure_tftp_pxe.yaml"

  - name: setup haproxy server
    include_tasks: "{{ playbook_dir }}/tasks/configure_haproxy_lb.yaml"

  #Need this here, just to make sure we have a working name resolution for packages installation
  - name: Overwrite resolv.conf
    template:
      src:  templates/resolv.conf.j2
      dest: /etc/resolv.conf
      owner: root
      mode: 0644

  - name: Fix NetworkManager.cnf
    lineinfile:
      path: /etc/NetworkManager/NetworkManager.conf
      insertafter: '[main]'
      line: 'dns=none'
    notify:
      - restart dns

# And don't forget to restart it
  - name: enable services
    systemd:
      name: "{{ item }}"
      enabled: yes
      state: restarted
    with_items:
      - named
      - haproxy
      - httpd 
      - tftp
      - dhcpd
      - firewalld

  - name: reload systemd daemons
    systemd:
      daemon_reload: yes


- name: Setting up PXE server for openshift
  hosts: service
  vars_files:
    - vars/main.yaml
  handlers:
    - import_tasks: handlers/main.yaml
  #become: yes
  #become_method: sudo
  gather_facts: no
  tasks:
 
    # Let's download the right files for our version of OKD
    - name: Download PXE files
      get_url:
        url: "{{ item.src }}"
        dest: "{{ item.dest }}" 
        mode: 0644
      with_items:
        - { src: "{{ ocp.client }}",    dest: tmp/client.tar.gz }
        - { src: "{{ ocp.install }}",   dest: tmp/install.tar.gz }
        - { src: "{{ ocp.kernel }}",    dest: tmp/kernel }
        - { src: "{{ ocp.rootfs }}",    dest: tmp/rootfs.img }
        - { src: "{{ ocp.initramfs }}", dest: tmp/initramfs.img }
        - { src: "{{ jq_file }}",       dest: tmp/jq }

    - name: Extract and copy the binaries (oc, kubectl, openshift-install)
      become: yes
      shell: |
        cd tmp
        tar -xzvf install.tar.gz
        rm install.tar.gz
        strip openshift-install               # I like my binaries not bloated, thanks
        mv openshift-install /usr/local/bin/
        tar -xzvf client.tar.gz 
        rm client.tar.gz
        strip kubectl
        mv oc kubectl /usr/local/bin/
        cp kernel /var/lib/tftpboot/rhcos
        cp initramfs.img /var/lib/tftpboot/rhcos
        cp rootfs.img /var/www/html/rhcos
        cp -rvf /usr/share/syslinux/* /var/lib/tftpboot

    - name: keygen
      community.crypto.openssh_keypair:
        path: "{{ user.home }}/.ssh/id_rsa"    #ssh_ocp
        owner: '{{ user.name }}'
      tags:
        - pxe

    - name: get remote file contents
      command: "cat '{{ user.home }}'/.ssh/id_rsa.pub"    #ssh_ocp.pub
      register: key
      tags:
        - pxe

    - name: Create config files
      template:
        src:  "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        mode: 0644
      with_items:
        - { src: templates/install-config.yaml.j2,  dest: install-config-base.yaml }
      #notify:
      #- Restart DNS
      tags:
        - pxe

    - name: copy install-config-base.yaml to install_dir
      command: "cp '{{ user.home }}'/install-config-base.yaml '{{ user.home }}'/install_dir/install-config.yaml"
      tags:
        - pxe

    - name: Add SSH key to install-config.yaml
      vars:
        sshkey: "{{ key.stdout }}"
      lineinfile:
        path: '{{ user.home }}/install_dir/install-config.yaml'
        regexp: '^sshKey:'
        line: "sshKey: '{{ sshkey }}' " 
        backup: yes
      tags:
        - pxe

    # Get the pull secret from ~/pull_secret.txt. If you don't have one, create the file and add '{"auths":{"fake":{"auth": "bar"}}}' as the content
    - name: Add Pull Secret to install-config.yaml
      vars:
        pull: "'{{ lookup('file', './files/pull_secret.txt') }}'"  #must add single qoute at begin and end
      lineinfile: 
        path: "{{ user.home }}/install_dir/install-config.yaml"
        regexp: '^pullSecret:'
        # To make sure you don't run into escaping quotes, double quotes... 
        #just make sure your pull secret in the file is between single quotes, and double quotes everywhere else :!env_var 
        # For instance: '{"auths":{"fake":{"auth": "bar"}}}'
        line: "pullSecret: {{ pull }}"   
        backup: yes
      tags:
        - pxe

    # Let's create the proper installation files (ignition, manifests, ...)
    - name: Create the install files
      shell: |
        /usr/local/bin/openshift-install create manifests --dir={{ user.home }}/install_dir/
        cp {{ user.home }}/install_dir/install-config.yaml {{ user.home }}/install-config.back
        sed -i 's/mastersSchedulable: true/mastersSchedulable: False/' {{ user.home }}/install_dir/manifests/cluster-scheduler-02-config.yml
        /usr/local/bin/openshift-install create ignition-configs --dir={{ user.home }}/install_dir/
      tags:
        - pxe

    # Make these files available on the Web server
    - name: Copy all files to www, setup selinux,firewall
      become: yes
      shell: |
        cp -v {{ user.home }}/install_dir/*.ign /var/www/html/ignition
        chmod 644 /var/www/html/ignition/*.ign
        restorecon -RFv /var/www/html/rhcos
        restorecon -RFv /var/www/html/
        restorecon -RFv /var/lib/tftpboot/rhcos
        semanage port -a 6443 -t http_port_t -p tcp
        semanage port -a 22623 -t http_port_t -p tcp
        semanage port -a 32700 -t http_port_t -p tcp
        firewall-cmd --add-service={dhcp,tftp,http,https,dns} --permanent
        #firewall-cmd --add-service={http,https} --permanent
        firewall-cmd --add-port={6443,22623}/tcp --permanent
        firewall-cmd --add-port=8080/tcp --permanent
        firewall-cmd --reload


      tags:
        - pxe


    - name: Change www ownership
      become: yes
      file: 
        path: /var/www/html/rhcos/
        recurse: yes 
        state: directory
        owner: apache
        group: apache
        mode: 0755
      tags:
        - pxe

    - name: Change install_dir ownership
      file: 
        path: "{{ user.home }}/install_dir"
        recurse: yes 
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: 0755
      tags:
        - dir

    - name: Copy kubeconfig to .kube
      command: "cp '{{ user.home }}'/install_dir/auth/kubeconfig '{{ user.home }}'/.kube/config"
      tags:
        - kube

    - name: Create PXE files
      become: yes
      template:
        src: templates/pxe-{{ item.role }}.j2
        dest: "/var/lib/tftpboot/pxelinux.cfg/01-{{ item.macaddr | lower | regex_replace (':', '-')}}"    # lower ?
        mode: 0555
      with_items: 
      # Todo : MAKE THIS DANG LIST FRACKING GENERIC !!! 
        - { macaddr: "{{ bootstrap.macaddr }}", role: bootstrap}
        - { macaddr: "{{ masters[0].macaddr }}", role: master}
        - { macaddr: "{{ masters[1].macaddr }}", role: master}
        - { macaddr: "{{ masters[2].macaddr }}", role: master}
        - { macaddr: "{{ workers[0].macaddr }}", role: worker}
        - { macaddr: "{{ workers[1].macaddr }}", role: worker}
        - { macaddr: "{{ workers[2].macaddr }}", role: worker}
      notify:
        - restart tftp
      tags:
        - pxe
        - last